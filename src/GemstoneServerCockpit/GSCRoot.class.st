Class {
	#name : #GSCRoot,
	#superclass : #GSCTool,
	#instVars : [
		'scheme'
	],
	#category : #'GemstoneServerCockpit-Model'
}

{ #category : #'as yet unclassified' }
GSCRoot >> autogeneratedAppIndexFor: anApplicationTool [

	^ self configAt: ('appIndexes:', anApplicationTool shortCode) default: [
		| presentValues highest |
		presentValues := (self configAt: 'appIndexes') ifNil: [ {  } ] ifNotNil: [ :dict | dict values ].
		highest := presentValues ifEmpty: [ 0 ] ifNotEmpty: [ :all | all max ].
		
		(highest + 1) asInteger
	]
]

{ #category : #building }
GSCRoot >> build [
	self add: GSCConfigurationEditor then: [ :editor |
		editor
			title: 'Root config';
			config: self config.
	].

]

{ #category : #accessing }
GSCRoot >> config [

	^ scheme config
]

{ #category : #accessing }
GSCRoot >> doAddApplication [
	| schemeClass scheme conf |

	"TODO: Let choose version"
	schemeClass := GSCWebApplicationSchemeV1.

	"TODO: Name it."

	scheme := schemeClass new.
	conf := GSCConfiguration fromFile: ('/etc/gsc/applications/99_new.conf').
"	conf at: 'project:shortCode' put: 'NewWebApp'.
	conf at: 'project:name' put: 'New Web Application'."

	scheme config: conf.
	
	"app := "
	scheme buildApplicationToolInto: self
]

{ #category : #accessing }
GSCRoot >> doTestShell [
	self testShellExecution
]

{ #category : #'private - initialization' }
GSCRoot >> gatherFacts [
	self factAt: 'hostname' put: (
		self core readCommand: 'hostname' ).
	self factAt: 'userHome' put: (
		self core readCommand: 'echo -n ~', self serverUsername ).
	self factAt: 'memoryTotalBytes' put: (
		self core readCommand: 'awk' args: { '/MemTotal:/ { printf "%0.f",$2 * 1024}'. '/proc/meminfo' } ) asInteger.
	self factAt: 'memoryPageSizeBytes' put: (
		self core readCommand: 'getconf' args: { 'PAGE_SIZE' } ) asInteger.

	"Evt get shared memory usage: 
	lsipc -o RESOURCE,USE% | grep SHMALL
	"
]

{ #category : #'as yet unclassified' }
GSCRoot >> gemstoneGsHome [
	^ ((self configAt: 'gemstone:gsHome') ifBlank: [ '/opt/GsDevKit_home' ]) asPath.
]

{ #category : #'as yet unclassified' }
GSCRoot >> gsDevKit [
	^ self rootFindTool: GSCGsDevKit
]

{ #category : #accessing }
GSCRoot >> hostname [
	^ self factAt: 'hostname'
]

{ #category : #testing }
GSCRoot >> isRoot [
	^ true
]

{ #category : #accessing }
GSCRoot >> root [
	^ self
]

{ #category : #accessing }
GSCRoot >> scheme [

	^ scheme
]

{ #category : #accessing }
GSCRoot >> scheme: anObject [

	scheme := anObject
]

{ #category : #'as yet unclassified' }
GSCRoot >> stones [
	^ self rootFindTools: GSCGemstoneStone
]

{ #category : #tests }
GSCRoot >> testShellExecution [
	
	| lines stdin |

	lines := OrderedCollection new.
	
	stdin := 'TEST1
TEST2
TEST3'.

	self core
		runShell: 'cat'
		args: nil
		stdin: stdin
		sudo: false
		onOutput: [ :newLines | lines addAll: newLines ]
		onRun: nil
		onFinish: nil.

	self log: lines joinUsingLf
]

{ #category : #accessing }
GSCRoot >> title [
	^ 'Home'
]

{ #category : #accessing }
GSCRoot >> userHome [
	^ self factAt: 'userHome'
]
